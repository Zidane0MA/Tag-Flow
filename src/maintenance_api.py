#!/usr/bin/env python3
"""
üîß Maintenance API - Fase 2
API program√°tica especializada para operaciones de mantenimiento desde la app web

Caracter√≠sticas:
- Operaciones as√≠ncronas con tracking de progreso
- Cancelaci√≥n de operaciones en curso
- Sistema de salud del sistema
- Reporting en tiempo real
- Timeout y manejo de errores granular
"""

import os
import time
import uuid
import threading
import logging
from pathlib import Path
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Callable
from dataclasses import dataclass, field
from enum import Enum
import json
from concurrent.futures import ThreadPoolExecutor, Future
import psutil

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Importar m√≥dulos del proyecto
import sys
sys.path.insert(0, str(Path(__file__).parent.parent))

import config
from src.database import Database
from src.maintenance.thumbnail_ops import ThumbnailOperations
from src.maintenance.database_ops import DatabaseOperations


class OperationStatus(Enum):
    """Estados de operaci√≥n"""
    PENDING = "pending"
    RUNNING = "running"
    COMPLETED = "completed"
    FAILED = "failed"
    CANCELLED = "cancelled"


class OperationType(Enum):
    """Tipos de operaci√≥n"""
    REGENERATE_THUMBNAILS = "regenerate_thumbnails"
    POPULATE_THUMBNAILS = "populate_thumbnails"
    CLEAN_THUMBNAILS = "clean_thumbnails"
    POPULATE_DATABASE = "populate_database"
    OPTIMIZE_DATABASE = "optimize_database"
    CLEAR_DATABASE = "clear_database"
    BACKUP_DATABASE = "backup_database"
    RESTORE_DATABASE = "restore_database"


@dataclass
class OperationProgress:
    """Progreso de operaci√≥n"""
    operation_id: str
    operation_type: OperationType
    status: OperationStatus
    progress_percentage: float = 0.0
    current_step: str = ""
    total_items: int = 0
    processed_items: int = 0
    successful_items: int = 0
    failed_items: int = 0
    start_time: datetime = field(default_factory=datetime.now)
    end_time: Optional[datetime] = None
    error_message: Optional[str] = None
    result: Optional[Dict[str, Any]] = None
    cancellation_requested: bool = False
    
    @property
    def duration(self) -> float:
        """Duraci√≥n de la operaci√≥n en segundos"""
        end = self.end_time or datetime.now()
        return (end - self.start_time).total_seconds()
    
    @property
    def is_active(self) -> bool:
        """Verificar si la operaci√≥n est√° activa"""
        return self.status in [OperationStatus.PENDING, OperationStatus.RUNNING]
    
    def to_dict(self) -> Dict[str, Any]:
        """Convertir a diccionario para JSON"""
        return {
            'operation_id': self.operation_id,
            'operation_type': self.operation_type.value,
            'status': self.status.value,
            'progress_percentage': self.progress_percentage,
            'current_step': self.current_step,
            'total_items': self.total_items,
            'processed_items': self.processed_items,
            'successful_items': self.successful_items,
            'failed_items': self.failed_items,
            'start_time': self.start_time.isoformat(),
            'end_time': self.end_time.isoformat() if self.end_time else None,
            'duration': self.duration,
            'error_message': self.error_message,
            'result': self.result,
            'cancellation_requested': self.cancellation_requested
        }


class MaintenanceAPI:
    """
    üîß API program√°tica para operaciones de mantenimiento desde la app web
    
    Caracter√≠sticas:
    - Operaciones as√≠ncronas con tracking de progreso
    - Cancelaci√≥n de operaciones en curso
    - Sistema de salud del sistema
    - Reporting en tiempo real
    """
    
    def __init__(self):
        self.db = Database()
        self.thumbnail_ops = ThumbnailOperations()
        self.database_ops = DatabaseOperations()
        self.operations: Dict[str, OperationProgress] = {}
        self.active_futures: Dict[str, Future] = {}
        self.executor = ThreadPoolExecutor(max_workers=2)  # Limitar concurrencia
        self.lock = threading.Lock()
        
        # Limpiar operaciones antiguas al inicializar
        self._cleanup_old_operations()
    
    def regenerate_thumbnails_bulk(self, video_ids: List[int], force: bool = False) -> str:
        """
        üñºÔ∏è Regenerar thumbnails para videos espec√≠ficos de forma as√≠ncrona
        
        Args:
            video_ids: Lista de IDs de videos
            force: regenerar thumbnails existentes tambi√©n
            
        Returns:
            operation_id: ID de la operaci√≥n para tracking
        """
        operation_id = str(uuid.uuid4())
        
        operation = OperationProgress(
            operation_id=operation_id,
            operation_type=OperationType.REGENERATE_THUMBNAILS,
            status=OperationStatus.PENDING,
            total_items=len(video_ids),
            current_step="Iniciando regeneraci√≥n de thumbnails..."
        )
        
        with self.lock:
            self.operations[operation_id] = operation
        
        # Ejecutar operaci√≥n as√≠ncrona
        future = self.executor.submit(self._regenerate_thumbnails_async, operation_id, video_ids, force)
        self.active_futures[operation_id] = future
        
        logger.info(f"üñºÔ∏è Operaci√≥n de regeneraci√≥n de thumbnails iniciada: {operation_id}")
        return operation_id
    
    def populate_thumbnails_bulk(self, platform: Optional[str] = None, limit: Optional[int] = None, force: bool = False) -> str:
        """
        üìä Poblar thumbnails de forma as√≠ncrona
        
        Args:
            platform: plataforma espec√≠fica o None para todas
            limit: n√∫mero m√°ximo de thumbnails a generar
            force: regenerar thumbnails existentes
            
        Returns:
            operation_id: ID de la operaci√≥n para tracking
        """
        operation_id = str(uuid.uuid4())
        
        operation = OperationProgress(
            operation_id=operation_id,
            operation_type=OperationType.POPULATE_THUMBNAILS,
            status=OperationStatus.PENDING,
            current_step="Iniciando poblaci√≥n de thumbnails..."
        )
        
        with self.lock:
            self.operations[operation_id] = operation
        
        # Ejecutar operaci√≥n as√≠ncrona
        future = self.executor.submit(self._populate_thumbnails_async, operation_id, platform, limit, force)
        self.active_futures[operation_id] = future
        
        logger.info(f"üìä Operaci√≥n de poblaci√≥n de thumbnails iniciada: {operation_id}")
        return operation_id
    
    def clean_thumbnails_bulk(self, force: bool = False) -> str:
        """
        üßπ Limpiar thumbnails hu√©rfanos de forma as√≠ncrona
        
        Args:
            force: eliminar sin confirmaci√≥n
            
        Returns:
            operation_id: ID de la operaci√≥n para tracking
        """
        operation_id = str(uuid.uuid4())
        
        operation = OperationProgress(
            operation_id=operation_id,
            operation_type=OperationType.CLEAN_THUMBNAILS,
            status=OperationStatus.PENDING,
            current_step="Iniciando limpieza de thumbnails..."
        )
        
        with self.lock:
            self.operations[operation_id] = operation
        
        # Ejecutar operaci√≥n as√≠ncrona
        future = self.executor.submit(self._clean_thumbnails_async, operation_id, force)
        self.active_futures[operation_id] = future
        
        logger.info(f"üßπ Operaci√≥n de limpieza de thumbnails iniciada: {operation_id}")
        return operation_id
    
    def populate_database_bulk(self, source: str = 'all', platform: Optional[str] = None, 
                              limit: Optional[int] = None, force: bool = False) -> str:
        """
        üóÉÔ∏è Poblar base de datos de forma as√≠ncrona
        
        Args:
            source: 'db', 'organized', 'all' - fuente de datos
            platform: plataforma espec√≠fica o None para todas
            limit: n√∫mero m√°ximo de videos a importar
            force: forzar reimportaci√≥n de videos existentes
            
        Returns:
            operation_id: ID de la operaci√≥n para tracking
        """
        operation_id = str(uuid.uuid4())
        
        operation = OperationProgress(
            operation_id=operation_id,
            operation_type=OperationType.POPULATE_DATABASE,
            status=OperationStatus.PENDING,
            current_step="Iniciando poblaci√≥n de base de datos..."
        )
        
        with self.lock:
            self.operations[operation_id] = operation
        
        # Ejecutar operaci√≥n as√≠ncrona
        future = self.executor.submit(self._populate_database_async, operation_id, source, platform, limit, force)
        self.active_futures[operation_id] = future
        
        logger.info(f"üóÉÔ∏è Operaci√≥n de poblaci√≥n de BD iniciada: {operation_id}")
        return operation_id
    
    def optimize_database_bulk(self) -> str:
        """
        üîß Optimizar base de datos de forma as√≠ncrona
        
        Returns:
            operation_id: ID de la operaci√≥n para tracking
        """
        operation_id = str(uuid.uuid4())
        
        operation = OperationProgress(
            operation_id=operation_id,
            operation_type=OperationType.OPTIMIZE_DATABASE,
            status=OperationStatus.PENDING,
            current_step="Iniciando optimizaci√≥n de base de datos..."
        )
        
        with self.lock:
            self.operations[operation_id] = operation
        
        # Ejecutar operaci√≥n as√≠ncrona
        future = self.executor.submit(self._optimize_database_async, operation_id)
        self.active_futures[operation_id] = future
        
        logger.info(f"üîß Operaci√≥n de optimizaci√≥n de BD iniciada: {operation_id}")
        return operation_id
    
    def clear_database_bulk(self, platform: Optional[str] = None, force: bool = False) -> str:
        """
        üóëÔ∏è Limpiar base de datos de forma as√≠ncrona
        
        Args:
            platform: plataforma espec√≠fica o None para todas
            force: forzar eliminaci√≥n sin confirmaci√≥n
            
        Returns:
            operation_id: ID de la operaci√≥n para tracking
        """
        operation_id = str(uuid.uuid4())
        
        operation = OperationProgress(
            operation_id=operation_id,
            operation_type=OperationType.CLEAR_DATABASE,
            status=OperationStatus.PENDING,
            current_step="Iniciando limpieza de base de datos..."
        )
        
        with self.lock:
            self.operations[operation_id] = operation
        
        # Ejecutar operaci√≥n as√≠ncrona
        future = self.executor.submit(self._clear_database_async, operation_id, platform, force)
        self.active_futures[operation_id] = future
        
        logger.info(f"üóëÔ∏è Operaci√≥n de limpieza de BD iniciada: {operation_id}")
        return operation_id
    
    def backup_database_bulk(self, backup_path: Optional[str] = None) -> str:
        """
        üíæ Crear backup de base de datos de forma as√≠ncrona
        
        Args:
            backup_path: ruta espec√≠fica del backup o None para autom√°tica
            
        Returns:
            operation_id: ID de la operaci√≥n para tracking
        """
        operation_id = str(uuid.uuid4())
        
        operation = OperationProgress(
            operation_id=operation_id,
            operation_type=OperationType.BACKUP_DATABASE,
            status=OperationStatus.PENDING,
            current_step="Iniciando backup de base de datos..."
        )
        
        with self.lock:
            self.operations[operation_id] = operation
        
        # Ejecutar operaci√≥n as√≠ncrona
        future = self.executor.submit(self._backup_database_async, operation_id, backup_path)
        self.active_futures[operation_id] = future
        
        logger.info(f"üíæ Operaci√≥n de backup de BD iniciada: {operation_id}")
        return operation_id
    
    def get_operation_progress(self, operation_id: str) -> Optional[Dict[str, Any]]:
        """
        üìä Obtener progreso de operaci√≥n en curso
        
        Args:
            operation_id: ID de la operaci√≥n
            
        Returns:
            Dict con progreso de la operaci√≥n o None si no existe
        """
        with self.lock:
            operation = self.operations.get(operation_id)
            if operation:
                return operation.to_dict()
        return None
    
    def cancel_operation(self, operation_id: str) -> bool:
        """
        ‚ùå Cancelar operaci√≥n en curso
        
        Args:
            operation_id: ID de la operaci√≥n
            
        Returns:
            True si se pudo cancelar, False en caso contrario
        """
        with self.lock:
            operation = self.operations.get(operation_id)
            if operation and operation.is_active:
                operation.cancellation_requested = True
                operation.current_step = "Cancelaci√≥n solicitada..."
                logger.info(f"‚ùå Cancelaci√≥n solicitada para operaci√≥n: {operation_id}")
                
                # Intentar cancelar el Future si existe
                future = self.active_futures.get(operation_id)
                if future and not future.done():
                    future.cancel()
                    
                return True
        return False
    
    def get_system_health(self) -> Dict[str, Any]:
        """
        üíö Estado general del sistema
        
        Returns:
            Dict con informaci√≥n de salud del sistema
        """
        try:
            # Informaci√≥n del sistema
            cpu_percent = psutil.cpu_percent(interval=1)
            memory = psutil.virtual_memory()
            disk = psutil.disk_usage('/')
            
            # Informaci√≥n de la base de datos
            db_stats = self._get_database_stats()
            
            # Informaci√≥n de thumbnails
            thumbnail_stats = self.thumbnail_ops.get_thumbnail_stats()
            
            # Operaciones activas
            active_operations = len([op for op in self.operations.values() if op.is_active])
            
            # Informaci√≥n de archivos
            config_path = Path(config.config.BASE_PATH if hasattr(config.config, 'BASE_PATH') else '.')
            total_videos = len(list(config_path.glob('**/*.mp4'))) if config_path.exists() else 0
            
            return {
                'timestamp': datetime.now().isoformat(),
                'system': {
                    'cpu_percent': cpu_percent,
                    'memory_total_gb': memory.total / (1024**3),
                    'memory_used_gb': memory.used / (1024**3),
                    'memory_percent': memory.percent,
                    'disk_total_gb': disk.total / (1024**3),
                    'disk_used_gb': disk.used / (1024**3),
                    'disk_percent': (disk.used / disk.total) * 100
                },
                'database': db_stats,
                'thumbnails': thumbnail_stats,
                'operations': {
                    'active_operations': active_operations,
                    'total_operations': len(self.operations),
                    'executor_workers': self.executor._max_workers,
                    'executor_active': len(self.active_futures)
                },
                'files': {
                    'total_videos': total_videos,
                    'config_path': str(config_path)
                }
            }
            
        except Exception as e:
            logger.error(f"Error obteniendo salud del sistema: {e}")
            return {
                'timestamp': datetime.now().isoformat(),
                'error': str(e),
                'status': 'error'
            }
    
    def get_all_operations(self) -> List[Dict[str, Any]]:
        """
        üìã Obtener todas las operaciones
        
        Returns:
            Lista de todas las operaciones
        """
        with self.lock:
            return [op.to_dict() for op in self.operations.values()]
    
    def cleanup_completed_operations(self, max_age_hours: int = 24) -> int:
        """
        üßπ Limpiar operaciones completadas antiguas
        
        Args:
            max_age_hours: m√°ximo tiempo en horas para mantener operaciones
            
        Returns:
            N√∫mero de operaciones limpiadas
        """
        cutoff_time = datetime.now() - timedelta(hours=max_age_hours)
        cleaned = 0
        
        with self.lock:
            operations_to_remove = []
            for op_id, operation in self.operations.items():
                if not operation.is_active and operation.start_time < cutoff_time:
                    operations_to_remove.append(op_id)
            
            for op_id in operations_to_remove:
                del self.operations[op_id]
                if op_id in self.active_futures:
                    del self.active_futures[op_id]
                cleaned += 1
        
        if cleaned > 0:
            logger.info(f"üßπ Limpiadas {cleaned} operaciones antiguas")
        
        return cleaned
    
    # M√©todos privados
    
    def _regenerate_thumbnails_async(self, operation_id: str, video_ids: List[int], force: bool):
        """Regenerar thumbnails de forma as√≠ncrona"""
        operation = self.operations[operation_id]
        
        try:
            operation.status = OperationStatus.RUNNING
            operation.current_step = "Obteniendo informaci√≥n de videos..."
            
            # Crear callback para progreso
            def progress_callback(processed: int, total: int, current_item: str):
                if operation.cancellation_requested:
                    raise Exception("Operaci√≥n cancelada por el usuario")
                
                operation.processed_items = processed
                operation.total_items = total
                operation.progress_percentage = (processed / total) * 100 if total > 0 else 0
                operation.current_step = f"Procesando: {current_item}"
            
            # Ejecutar regeneraci√≥n con callback de progreso
            result = self.thumbnail_ops.regenerate_thumbnails_by_ids(video_ids, force)
            
            # Actualizar operaci√≥n con resultado
            operation.successful_items = result.get('successful', 0)
            operation.failed_items = result.get('failed', 0)
            operation.result = result
            
            if result['success']:
                operation.status = OperationStatus.COMPLETED
                operation.current_step = "Regeneraci√≥n completada exitosamente"
                operation.progress_percentage = 100.0
            else:
                operation.status = OperationStatus.FAILED
                operation.error_message = result.get('error', 'Error desconocido')
                operation.current_step = "Regeneraci√≥n fall√≥"
            
        except Exception as e:
            operation.status = OperationStatus.FAILED if not operation.cancellation_requested else OperationStatus.CANCELLED
            operation.error_message = str(e)
            operation.current_step = "Error en regeneraci√≥n" if not operation.cancellation_requested else "Operaci√≥n cancelada"
            logger.error(f"Error en regeneraci√≥n de thumbnails {operation_id}: {e}")
        
        finally:
            operation.end_time = datetime.now()
            # Limpiar Future
            if operation_id in self.active_futures:
                del self.active_futures[operation_id]
    
    def _populate_thumbnails_async(self, operation_id: str, platform: Optional[str], limit: Optional[int], force: bool):
        """Poblar thumbnails de forma as√≠ncrona"""
        operation = self.operations[operation_id]
        
        try:
            operation.status = OperationStatus.RUNNING
            operation.current_step = "Iniciando poblaci√≥n de thumbnails..."
            
            # Ejecutar poblaci√≥n
            result = self.thumbnail_ops.populate_thumbnails(platform, limit, force)
            
            # Actualizar operaci√≥n con resultado
            operation.successful_items = result.get('successful', 0)
            operation.failed_items = result.get('failed', 0)
            operation.total_items = result.get('total_videos', 0)
            operation.processed_items = operation.successful_items + operation.failed_items
            operation.result = result
            
            if result['success']:
                operation.status = OperationStatus.COMPLETED
                operation.current_step = "Poblaci√≥n completada exitosamente"
                operation.progress_percentage = 100.0
            else:
                operation.status = OperationStatus.FAILED
                operation.error_message = result.get('error', 'Error desconocido')
                operation.current_step = "Poblaci√≥n fall√≥"
            
        except Exception as e:
            operation.status = OperationStatus.FAILED if not operation.cancellation_requested else OperationStatus.CANCELLED
            operation.error_message = str(e)
            operation.current_step = "Error en poblaci√≥n" if not operation.cancellation_requested else "Operaci√≥n cancelada"
            logger.error(f"Error en poblaci√≥n de thumbnails {operation_id}: {e}")
        
        finally:
            operation.end_time = datetime.now()
            if operation_id in self.active_futures:
                del self.active_futures[operation_id]
    
    def _clean_thumbnails_async(self, operation_id: str, force: bool):
        """Limpiar thumbnails de forma as√≠ncrona"""
        operation = self.operations[operation_id]
        
        try:
            operation.status = OperationStatus.RUNNING
            operation.current_step = "Analizando thumbnails hu√©rfanos..."
            
            # Ejecutar limpieza
            result = self.thumbnail_ops.clean_thumbnails(force)
            
            # Actualizar operaci√≥n con resultado
            operation.successful_items = result.get('deleted_count', 0)
            operation.total_items = result.get('orphaned_count', 0)
            operation.processed_items = operation.total_items
            operation.result = result
            
            if result['success']:
                operation.status = OperationStatus.COMPLETED
                operation.current_step = "Limpieza completada exitosamente"
                operation.progress_percentage = 100.0
            else:
                operation.status = OperationStatus.FAILED
                operation.error_message = result.get('error', 'Error desconocido')
                operation.current_step = "Limpieza fall√≥"
            
        except Exception as e:
            operation.status = OperationStatus.FAILED if not operation.cancellation_requested else OperationStatus.CANCELLED
            operation.error_message = str(e)
            operation.current_step = "Error en limpieza" if not operation.cancellation_requested else "Operaci√≥n cancelada"
            logger.error(f"Error en limpieza de thumbnails {operation_id}: {e}")
        
        finally:
            operation.end_time = datetime.now()
            if operation_id in self.active_futures:
                del self.active_futures[operation_id]
    
    def _populate_database_async(self, operation_id: str, source: str, platform: Optional[str], 
                                limit: Optional[int], force: bool):
        """Poblar base de datos de forma as√≠ncrona"""
        operation = self.operations[operation_id]
        
        try:
            operation.status = OperationStatus.RUNNING
            operation.current_step = "Iniciando poblaci√≥n de base de datos..."
            
            # Crear callback para progreso
            def progress_callback(processed: int, total: int, current_item: str):
                if operation.cancellation_requested:
                    raise Exception("Operaci√≥n cancelada por el usuario")
                
                operation.processed_items = processed
                operation.total_items = total
                operation.progress_percentage = (processed / total) * 100 if total > 0 else 0
                operation.current_step = f"Procesando: {current_item}"
            
            # Ejecutar poblaci√≥n con callback de progreso
            result = self.database_ops.populate_database(source, platform, limit, force, progress_callback=progress_callback)
            
            # Actualizar operaci√≥n con resultado
            operation.successful_items = result.get('imported', 0)
            operation.failed_items = result.get('errors', 0)
            operation.total_items = result.get('total_found', 0)
            operation.processed_items = operation.successful_items + operation.failed_items
            operation.result = result
            
            if result['success']:
                operation.status = OperationStatus.COMPLETED
                operation.current_step = "Poblaci√≥n completada exitosamente"
                operation.progress_percentage = 100.0
            else:
                operation.status = OperationStatus.FAILED
                operation.error_message = result.get('error', 'Error desconocido')
                operation.current_step = "Poblaci√≥n fall√≥"
            
        except Exception as e:
            operation.status = OperationStatus.FAILED if not operation.cancellation_requested else OperationStatus.CANCELLED
            operation.error_message = str(e)
            operation.current_step = "Error en poblaci√≥n" if not operation.cancellation_requested else "Operaci√≥n cancelada"
            logger.error(f"Error en poblaci√≥n de BD {operation_id}: {e}")
        
        finally:
            operation.end_time = datetime.now()
            if operation_id in self.active_futures:
                del self.active_futures[operation_id]
    
    def _optimize_database_async(self, operation_id: str):
        """Optimizar base de datos de forma as√≠ncrona"""
        operation = self.operations[operation_id]
        
        try:
            operation.status = OperationStatus.RUNNING
            operation.current_step = "Optimizando base de datos..."
            operation.progress_percentage = 50.0
            
            # Ejecutar optimizaci√≥n
            result = self.database_ops.optimize_database()
            
            # Actualizar operaci√≥n con resultado
            operation.result = result
            operation.total_items = 1
            operation.processed_items = 1
            
            if result['success']:
                operation.status = OperationStatus.COMPLETED
                operation.current_step = "Optimizaci√≥n completada exitosamente"
                operation.progress_percentage = 100.0
                operation.successful_items = 1
            else:
                operation.status = OperationStatus.FAILED
                operation.error_message = result.get('error', 'Error desconocido')
                operation.current_step = "Optimizaci√≥n fall√≥"
                operation.failed_items = 1
            
        except Exception as e:
            operation.status = OperationStatus.FAILED if not operation.cancellation_requested else OperationStatus.CANCELLED
            operation.error_message = str(e)
            operation.current_step = "Error en optimizaci√≥n" if not operation.cancellation_requested else "Operaci√≥n cancelada"
            logger.error(f"Error en optimizaci√≥n de BD {operation_id}: {e}")
        
        finally:
            operation.end_time = datetime.now()
            if operation_id in self.active_futures:
                del self.active_futures[operation_id]
    
    def _clear_database_async(self, operation_id: str, platform: Optional[str], force: bool):
        """Limpiar base de datos de forma as√≠ncrona"""
        operation = self.operations[operation_id]
        
        try:
            operation.status = OperationStatus.RUNNING
            operation.current_step = "Analizando videos a eliminar..."
            
            # Ejecutar limpieza
            result = self.database_ops.clear_database(platform, force)
            
            # Actualizar operaci√≥n con resultado
            operation.successful_items = result.get('deleted', 0)
            operation.total_items = result.get('videos_found', 0)
            operation.processed_items = operation.total_items
            operation.result = result
            
            if result['success']:
                operation.status = OperationStatus.COMPLETED
                operation.current_step = "Limpieza completada exitosamente"
                operation.progress_percentage = 100.0
            else:
                operation.status = OperationStatus.FAILED
                operation.error_message = result.get('error', 'Error desconocido')
                operation.current_step = "Limpieza fall√≥"
            
        except Exception as e:
            operation.status = OperationStatus.FAILED if not operation.cancellation_requested else OperationStatus.CANCELLED
            operation.error_message = str(e)
            operation.current_step = "Error en limpieza" if not operation.cancellation_requested else "Operaci√≥n cancelada"
            logger.error(f"Error en limpieza de BD {operation_id}: {e}")
        
        finally:
            operation.end_time = datetime.now()
            if operation_id in self.active_futures:
                del self.active_futures[operation_id]
    
    def _backup_database_async(self, operation_id: str, backup_path: Optional[str]):
        """Crear backup de base de datos de forma as√≠ncrona"""
        operation = self.operations[operation_id]
        
        try:
            operation.status = OperationStatus.RUNNING
            operation.current_step = "Creando backup de base de datos..."
            operation.progress_percentage = 50.0
            
            # Ejecutar backup
            result = self.database_ops.backup_database(backup_path)
            
            # Actualizar operaci√≥n con resultado
            operation.result = result
            operation.total_items = 1
            operation.processed_items = 1
            
            if result['success']:
                operation.status = OperationStatus.COMPLETED
                operation.current_step = "Backup completado exitosamente"
                operation.progress_percentage = 100.0
                operation.successful_items = 1
            else:
                operation.status = OperationStatus.FAILED
                operation.error_message = result.get('error', 'Error desconocido')
                operation.current_step = "Backup fall√≥"
                operation.failed_items = 1
            
        except Exception as e:
            operation.status = OperationStatus.FAILED if not operation.cancellation_requested else OperationStatus.CANCELLED
            operation.error_message = str(e)
            operation.current_step = "Error en backup" if not operation.cancellation_requested else "Operaci√≥n cancelada"
            logger.error(f"Error en backup de BD {operation_id}: {e}")
        
        finally:
            operation.end_time = datetime.now()
            if operation_id in self.active_futures:
                del self.active_futures[operation_id]
    
    def _get_database_stats(self) -> Dict[str, Any]:
        """Obtener estad√≠sticas de la base de datos"""
        try:
            with self.db.get_connection() as conn:
                # Contar videos por plataforma
                cursor = conn.execute("""
                    SELECT platform, COUNT(*) as count 
                    FROM videos 
                    GROUP BY platform
                """)
                platform_counts = dict(cursor.fetchall())
                
                # Contar videos con thumbnails
                cursor = conn.execute("""
                    SELECT 
                        COUNT(*) as total,
                        COUNT(thumbnail_path) as with_thumbnails
                    FROM videos
                """)
                thumbnail_stats = dict(cursor.fetchone())
                
                # Tama√±o de la base de datos
                cursor = conn.execute("SELECT page_count * page_size as size FROM pragma_page_count(), pragma_page_size()")
                db_size = cursor.fetchone()[0]
                
                return {
                    'total_videos': sum(platform_counts.values()),
                    'platform_counts': platform_counts,
                    'videos_with_thumbnails': thumbnail_stats['with_thumbnails'],
                    'videos_without_thumbnails': thumbnail_stats['total'] - thumbnail_stats['with_thumbnails'],
                    'database_size_mb': db_size / (1024 * 1024),
                    'status': 'healthy'
                }
                
        except Exception as e:
            logger.error(f"Error obteniendo estad√≠sticas de BD: {e}")
            return {
                'status': 'error',
                'error': str(e)
            }
    
    def _cleanup_old_operations(self):
        """Limpiar operaciones antiguas al inicializar"""
        try:
            self.cleanup_completed_operations(max_age_hours=24)
        except Exception as e:
            logger.warning(f"Error limpiando operaciones antiguas: {e}")
    
    def __del__(self):
        """Limpiar recursos al destruir"""
        try:
            self.executor.shutdown(wait=True, timeout=30)
        except Exception as e:
            logger.warning(f"Error cerrando executor: {e}")


# Instancia global (singleton)
_maintenance_api_instance = None

def get_maintenance_api() -> MaintenanceAPI:
    """Obtener instancia singleton de MaintenanceAPI"""
    global _maintenance_api_instance
    if _maintenance_api_instance is None:
        _maintenance_api_instance = MaintenanceAPI()
    return _maintenance_api_instance


# Funciones de conveniencia
def start_regenerate_thumbnails(video_ids: List[int], force: bool = False) -> str:
    """Iniciar regeneraci√≥n de thumbnails as√≠ncrona"""
    return get_maintenance_api().regenerate_thumbnails_bulk(video_ids, force)

def start_populate_thumbnails(platform: Optional[str] = None, limit: Optional[int] = None, force: bool = False) -> str:
    """Iniciar poblaci√≥n de thumbnails as√≠ncrona"""
    return get_maintenance_api().populate_thumbnails_bulk(platform, limit, force)

def start_clean_thumbnails(force: bool = False) -> str:
    """Iniciar limpieza de thumbnails as√≠ncrona"""
    return get_maintenance_api().clean_thumbnails_bulk(force)

def get_operation_status(operation_id: str) -> Optional[Dict[str, Any]]:
    """Obtener estado de operaci√≥n"""
    return get_maintenance_api().get_operation_progress(operation_id)

def cancel_operation(operation_id: str) -> bool:
    """Cancelar operaci√≥n"""
    return get_maintenance_api().cancel_operation(operation_id)

def get_system_health() -> Dict[str, Any]:
    """Obtener salud del sistema"""
    return get_maintenance_api().get_system_health()