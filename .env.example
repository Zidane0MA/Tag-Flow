# Tag-Flow V2 - Plantilla de Configuración
# Copia este archivo a .env y completa con tus valores reales

# ========================================
# APIS REQUERIDAS (GRATUITAS)
# ========================================

# YouTube Data API v3 (GRATIS - 10k consultas/día)
# Obtener en: https://console.developers.google.com/
YOUTUBE_API_KEY="tu_clave_youtube_aqui"

# Google Vision API para reconocimiento de famosos (OPCIONAL)
# Obtener en: https://console.cloud.google.com/
GOOGLE_APPLICATION_CREDENTIALS="config/gcp_credentials.json"

# Spotify Web API (GRATIS)
# Obtener en: https://developer.spotify.com/dashboard/
SPOTIFY_CLIENT_ID="tu_spotify_client_id"
SPOTIFY_CLIENT_SECRET="tu_spotify_client_secret"

# ========================================
# FUENTES EXTERNAS (RUTAS AUTOMÁTICAS)
# ========================================

# Carpetas Organizadas
# Estructura: D:\4K All\{Youtube|Tiktok|Instagram}\{Creador}\videos
ORGANIZED_BASE_PATH="D:/4K All"

# Bases de Datos Externas - 4K Apps
# Actualiza estas rutas según tu instalación

# 4K Video Downloader+ (YouTube)
EXTERNAL_YOUTUBE_DB="C:/Users/USUARIO/AppData/Local/4kdownload.com/4K Video Downloader+/4K Video Downloader+/XXXXX.sqlite"

# 4K Tokkit (TikTok)  
EXTERNAL_TIKTOK_DB="D:/4K Tokkit/data.sqlite"

# 4K Stogram (Instagram)
EXTERNAL_INSTAGRAM_DB="D:/4K Stogram/.stogram.sqlite"

# ========================================
# CONFIGURACIÓN DE PROCESAMIENTO
# ========================================

# Configuración de thumbnails optimizada para VELOCIDAD
THUMBNAIL_SIZE="160x120"
THUMBNAIL_QUALITY=60

# Configuración de procesamiento paralelo optimizada
MAX_CONCURRENT_PROCESSING=4
THUMBNAIL_CACHE_SIZE=50

# Configuración de validación deshabilitada para velocidad
THUMBNAIL_MIN_SIZE=512
ENABLE_THUMBNAIL_VALIDATION=false
# OPTIMIZACIÓN: Usar 4 workers max para evitar thrashing de CPU

USE_GPU_DEEPFACE=true
DEEPFACE_MODEL="ArcFace"
TF_ENABLE_ONEDNN_OPTS=0

# ========================================
# CONFIGURACIÓN DE LA APLICACIÓN WEB
# ========================================

# Modo de desarrollo (development/production)
FLASK_ENV="development"

# Activar debug (true/false)
FLASK_DEBUG=true

# Host de la aplicación
FLASK_HOST="localhost"

# Puerto de la aplicación
FLASK_PORT=5000

# ========================================
# RUTAS INTERNAS DEL SISTEMA
# ========================================

# Carpeta de thumbnails generados
THUMBNAILS_PATH="D:/Tag-Flow/data/thumbnails"

# Carpeta de videos organizados (salida)
PROCESSED_VIDEOS_PATH="D:/Tag-Flow/videos_procesados"

# ========================================
# ACRCLOUD (FALLBACK MUSICAL)
# ========================================

# ACRCloud para reconocimiento musical de fallback
# Obtener en: https://www.acrcloud.com/
ACRCLOUD_HOST="identify-eu-west-1.acrcloud.com"
ACRCLOUD_ACCESS_KEY="tu_acrcloud_access_key"
ACRCLOUD_ACCESS_SECRET="tu_acrcloud_secret"

# ========================================
# 🆕 OPTIMIZACIONES DE RENDIMIENTO
# ========================================

# Activar optimizaciones de base de datos para main.py (true/false)
# Mejora el rendimiento hasta 10-20x en verificación de duplicados
USE_OPTIMIZED_DATABASE=true

# TTL del cache en segundos (300 = 5 minutos)
# Cache de consultas frecuentes para mejor performance
DATABASE_CACHE_TTL=300

# Tamaño máximo del cache LRU
# Más grande = mejor hit rate, pero más memoria
DATABASE_CACHE_SIZE=1000

# Activar métricas de rendimiento en tiempo real (true/false)
# Muestra estadísticas de cache y performance
ENABLE_PERFORMANCE_METRICS=true

# ========================================
# INSTRUCCIONES DE CONFIGURACIÓN
# ========================================

# 1. APIS OBLIGATORIAS:
#    - YouTube API: Necesaria para reconocimiento musical
#    - Spotify API: Necesaria para metadatos musicales
#    - Google Vision: Opcional, para reconocimiento de famosos
#
# 2. RUTAS DE 4K APPS:
#    - Encuentra las rutas reales en tu sistema
#    - Windows: Generalmente en AppData/Local o en la carpeta de instalación
#    - Las rutas deben apuntar a los archivos .sqlite
#
# 3. CARPETAS ORGANIZADAS:
#    - Crea la estructura: D:\4K All\Youtube\, D:\4K All\Tiktok\, D:\4K All\Instagram\
#    - Dentro de cada carpeta, crea subcarpetas por creador
#    - Ejemplo: D:\4K All\Youtube\NombreCreador\video.mp4
#
# 4. VERIFICAR CONFIGURACIÓN:
#    python verify_config.py
#
# 5. VER ESTADÍSTICAS:
#    python maintenance.py show-stats